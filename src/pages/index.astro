---
import BaseLayout from "../layouts/home.astro"
import ProjectCards from "../components/index/projectCards.astro"
import Intro from "../components/index/Intro.svelte"

// zindex-0
// photo zindex-10

// Data Fetching: List all Markdown projects in the repo .
let allProjects = Astro.fetchContent('./Projects/*.md');
const allPosts = allProjects.sort((a, b) => new Date(b.publishDate) - new Date(a.publishDate));
// console.log(allPosts);

---
<BaseLayout 
    title="Sukhpreet Singh Web developer" 
    description="My personel portfolio to show recuriter how able I am to do stuff ." 
  >
    <script slot="topScript">
        (async function() {
        if (CSS["paintWorklet"] === undefined)
          await import(
            "https://unpkg.com/css-paint-polyfill@next/dist/css-paint-polyfill.js"
          );
        CSS.paintWorklet.addModule(
          "https://unpkg.com/curved-line@1.0.0/curved-line.js"
        );
      })();
    </script>
        <section class="flex flex-col items-center justify-center w-full pt-16 pb-28">
            <div class="flex flex-col gap-16 px-10 lg:flex-row">
            <article
                id="background-circle"
                class="relative z-0 flex items-center justify-center flex-shrink-0 w-32 h-32 rounded-full lg:w-64 md:w-52 sm:w-44 lg:h-64 md:h-52 sm:h-44"
                style="
                    background: radial-gradient(
                        circle,
                        hsla(231, 100%, 50%, 1) 0%,
                        hsla(196, 100%, 50%, 1) 100%
                    );
                "
            >
                <!-- <div class="z-10 blur-[2px] text-black  absolute flex h-full w-full items-center justify-center text-5xl">Anshu</div> -->
                <div
                    id="photo"
                    class="relative z-10 rounded-full lg:w-56 md:w-44 sm:w-36 w-28 opacity-80 lg:h-56 md:h-44 sm:h-36 h-28"
                    style="
                        box-shadow: 0px 0px 60px 1px hsla(210, 100%, 70%, 1);
                        background-position: center center;
                        background-size: cover;
                        background-image: url('');
                    "
                ></div>
            </article>
                <Intro client:idle/>
            </div>
            <div
                class="flex flex-col items-start justify-start h-full max-w-2xl px-5 mt-44"
            >
                <h1 intersect="!opacity-100" class="mt-10 mb-12 font-sans text-left text-white transition-opacity duration-1000 opacity-50 text-7xl" >
                    Projects
                </h1>
                <div class="flex flex-col gap-10 text-left">
                    <ProjectCards allProjects={allProjects}/>
                <div/>
            </div>
            <div class="flex items-center justify-center w-full mt-20">
                <span class="px-3 py-2 text-xs rounded-lg bg-blueGray-1000 text-blueGray-500">
                    Background Photo by <a href="https://unsplash.com/@williamdaigneault?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">William Daigneault</a> on <a href="https://unsplash.com/@williamdaigneault?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
                </span>
            </div>
            <!-- <ul
                class="mt-10 font-semibold text-white text-opacity-40 font-jetMono"
            >
                <h1 class="ml-8 text-xl">I like !</h1>
                <section
                    class="flex flex-col items-center justify-center w-full h-full "
                >
                    <article
                        class="grid max-w-xl grid-flow-col grid-cols-2 grid-rows-3 gap-4 p-4 sm:grid-cols-3 sm:grid-rows-2 place-items-center"
                    >
                        <a class="flex items-center w-auto h-12" href="#">
                            <img src="/assets/StackLogo/nuxtLogo.svg" />
                        </a>
                        <a class="flex items-center w-auto h-12" href="#">
                            <img src="/assets/StackLogo/viteLogo.svg" class="w-10" />
                            <h1 class="text-4xl text-white">&nbsp;Vite</h1>
                        </a>
                        <a class="flex items-center w-auto h-12" href="#">
                            <img
                                class="w-10"
                                id="vueLogo"
                                src="https://camo.githubusercontent.com/c8f91d18976e27123643a926a2588b8d931a0292fd0b6532c3155379e8591629/68747470733a2f2f7675656a732e6f72672f696d616765732f6c6f676f2e706e67"
                            />
                            <h1 class="text-4xl text-white">&nbsp;Vue</h1>
                        </a>
                        <a class="flex items-center w-auto h-12" href="#">
                            <img src="/assets/StackLogo/tailwindLogo.svg" class="w-auto h-12" />
                        </a>
                        <a class="flex items-center w-auto h-12" href="#">
                            <img src="/assets/StackLogo/headlessUiLogo.svg" class="w-auto h-24" />
                        </a>
                        <a class="flex items-center w-auto h-12" href="#">
                            <img src="/assets/StackLogo/heroIconsLogo.svg" class="w-auto h-24" />
                        </a>
                    </article>
                </section>
            </ul> -->
        </section>
    <script slot="bottomScript" >
      let ele;
      let ale = {} ;
      var isTouchDevice =    (('ontouchstart' in window) ||    (navigator.maxTouchPoints > 0) ||    (navigator.msMaxTouchPoints > 0));
      if(!isTouchDevice){
          /* Code For Touch device */ 
        document.querySelectorAll('#backdrop').forEach((ele,i)=>{
          ele.addEventListener('touchstart',()=>{
            if( ale[i] === undefined ){
              ale[i] = ele.animate([
                {
                  backdropFilter: 'blur(0px)',
                        backgroundColor: 'rgba(20, 56, 167, 0', 
                        borderColor: 'rgba(20, 56, 167, 0)',
                      },
                      {
                        backdropFilter: 'blur(6px)',
                        backgroundColor: 'rgba(20, 56, 167, 0.1', 
                        borderColor: 'rgba(20, 56, 167, 0.5)',
                      },],
                    {
                      direction: 'normal',
                      fill: 'forwards',
                      duration: 1000,
                    })
              }
            ale[i].playbackRate = +1;
              ale[i].play();
          },false);
          ele.addEventListener('touchend',()=>{      
            ale[i].playbackRate = -1;
            ale[i].play();
          })
        });
      }else{
        /* Non-Code For Touch device */           
        document.querySelectorAll('#backdrop').forEach((ele,i)=>{
          ele.addEventListener('mouseenter',()=>{
            if( ale[i] === undefined ){
              ale[i] = ele.animate([
                {
                  backdropFilter: 'blur(0px)',
                        backgroundColor: 'rgba(20, 56, 167, 0', 
                        borderColor: 'rgba(20, 56, 167, 0)',
                      },
                      {
                        backdropFilter: 'blur(6px)',
                        backgroundColor: 'rgba(20, 56, 167, 0.1', 
                        borderColor: 'rgba(20, 56, 167, 0.5)',
                      },],
                    {
                      direction: 'normal',
                      fill: 'forwards',
                      duration: 1000,
                    })
              }
            ale[i].playbackRate = +1;
              ale[i].play();
          },false);
          ele.addEventListener('mouseleave',()=>{      
            ale[i].playbackRate = -1;
            ale[i].play();
          })
        });
      }
    function intersect() {
        let observer = new IntersectionObserver((entries, observer)=>{
          entries.forEach((entry) => {
            const animation = entry.target.getAttribute("intersect");
            if (animation === null) {
              return
            }
            if (entry.isIntersecting) {
              entry.target.classList.add(animation);
            } else {
              entry.target.classList.remove(animation);
            }
          });
        }, 
        {
          root: null,
          // Want to animate late after intersecting use see example
          // rootMargin: "-50px 0px -50px 0px",
          rootMargin: '0px',
          threshold: 1.0,
        });
        const elements = [...document.querySelectorAll('h1[intersect]')];
        elements.forEach((element) => observer.observe(element));
      }
      intersect();
    </script>
</BaseLayout>
